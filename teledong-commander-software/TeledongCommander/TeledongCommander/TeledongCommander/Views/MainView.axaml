<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:TeledongCommander.ViewModels"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="700"
             x:Class="TeledongCommander.Views.MainView"
			 xmlns:lvc="using:LiveChartsCore.SkiaSharpView.Avalonia"
			 xmlns:ss="using:LiveChartsCore.SkiaSharpView"
             x:DataType="vm:MainViewModel">
	
	<UserControl.Resources>
		<SolidColorBrush x:Key="PrimaryBackground" Color="#a799b7"></SolidColorBrush>
		<SolidColorBrush x:Key="SecondaryBackground" Color="#533a71"></SolidColorBrush>
		<!--<SolidColorBrush x:Key="Foreground" Color="#fdf4dc"></SolidColorBrush>
		<SolidColorBrush x:Key="BorderBrush" Color="Black"></SolidColorBrush>-->
	</UserControl.Resources>
	
	<Design.DataContext>
		<!-- This only sets the DataContext for the previewer in an IDE, to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
		<vm:MainViewModel />
	</Design.DataContext>

	<Grid Background="{StaticResource PrimaryBackground}">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="6*"></ColumnDefinition>
			<ColumnDefinition></ColumnDefinition>
			<ColumnDefinition Width="6*"></ColumnDefinition>
		</Grid.ColumnDefinitions>

		<!-- INPUT AREA -->
		<Border Background="{StaticResource SecondaryBackground}" BorderThickness="0" Margin="20" Padding="20" CornerRadius="30" Grid.Column="0">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition></RowDefinition>
					<RowDefinition Height="5*"></RowDefinition>
					<RowDefinition Height="6*"></RowDefinition>
				</Grid.RowDefinitions>
				
				<TextBlock Text="Input device" Grid.Row="0" HorizontalAlignment="Center"></TextBlock>
				<Separator VerticalAlignment="Bottom" Margin="0,0,0,5" />

				<StackPanel Grid.Row="1">
					<!--Make sure the command parameter IDs match the enum values. Too bothersome to pass enums directly in xaml-->
					<RadioButton GroupName="InputDevice" Content="Teledong" Command="{Binding SetInputDeviceCommand}" CommandParameter="0" ToolTip.Tip="Gets movement from a Teledong connected to the computer via USB." IsChecked="True"></RadioButton>
					<RadioButton GroupName="InputDevice" Content="Mouse" Command="{Binding SetInputDeviceCommand}" CommandParameter="1" ToolTip.Tip="Gets movement from the user's computer mouse." IsChecked="False"></RadioButton>
				</StackPanel>

				<Button Content="Connect" Command="{Binding ConnectInputDeviceCommand}" IsVisible="{Binding InputDeviceIsTeledong}" IsEnabled="{Binding CanClickConnectInputDeviceButton}" Margin="0,0,0,20" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Bottom"></Button>
				
				<Separator Grid.Row="1" Margin="0,0,0,5" VerticalAlignment="Bottom"/>

				<StackPanel Grid.Row="2" Spacing="10" Margin="5,10,5,10">
					
					<DockPanel>
						<TextBlock Text="Status: " ></TextBlock>
						<TextBlock Text="{Binding InputDeviceStatusText}"></TextBlock>
					</DockPanel>
					
					<lvc:CartesianChart x:Name="inputPositionChart" TooltipPosition="Hidden" BorderBrush="{StaticResource PrimaryBackground}" BorderThickness="1" Height="70" Series="{Binding InputPositionSeries}" XAxes="{Binding PositionChartXAxes}" AnimationsSpeed="0" ZoomMode="None">
					</lvc:CartesianChart>
					
					<ToggleSwitch Margin="0,20,0,0" Content="Sensor mode" IsChecked="{Binding TeledongSunlightMode}" OnContent="Sunlight" OffContent="Indoor lighting" IsVisible="{Binding InputDeviceIsTeledong}"></ToggleSwitch>
					<StackPanel Orientation="Horizontal" IsVisible="{Binding InputDeviceIsTeledong}" Margin="0,10,0,0" >
						<Button Command="{Binding CalibrateTeledongCommand}" Content="Calibrate"></Button>
						<TextBlock Text=""></TextBlock>
					</StackPanel>
					
					
					
				</StackPanel>

			</Grid>
		</Border>
		
		<TextBlock Text="ðŸ¡†" Grid.Column="1" FontSize="60" VerticalAlignment="Center" HorizontalAlignment="Center"/>

		<!-- OUTPUT AREA -->
		<Border Background="{StaticResource SecondaryBackground}" BorderThickness="0" Margin="20" Padding="20" CornerRadius="30" Grid.Column="2">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition></RowDefinition>
					<RowDefinition Height="5*"></RowDefinition>
					<RowDefinition Height="6*"></RowDefinition>
				</Grid.RowDefinitions>

				<TextBlock Text="Output devices" HorizontalAlignment="Center"></TextBlock>

				<Border Margin="0,40,0,0" Height="200" VerticalAlignment="Top" BorderBrush="Gray" BorderThickness="1" Background="#30000000">
					<ItemsControl ItemsSource="{Binding OutputDeviceListItems}">
					</ItemsControl>
				</Border>
				
				
				
				<!--<Separator VerticalAlignment="Bottom" Margin="0,0,0,5"/>

				<StackPanel Grid.Row="1">-->
					<!--Make sure the command parameter IDs match the enum values. Too bothersome to pass enums directly in xaml-->
				<!--<DockPanel>
						<RadioButton ToolTip.Tip="Sends the position to The Handy over the internet using a connection key." Command="{Binding SetOutputDeviceCommand}" CommandParameter="1" GroupName="OutputDevice" IsChecked="True" Content="The Handy key: "></RadioButton>
						<TextBox Text="{Binding TheHandyConnectionKey}" Margin="10,0,10,0"></TextBox>
					</DockPanel>
					<RadioButton ToolTip.Tip="Sends the position to a built-in Buttplug.io server, which supports numerous strokers on the local network and bluetooth." Command="{Binding SetOutputDeviceCommand}" CommandParameter="2" GroupName="OutputDevice" IsChecked="False" Content="Built-in server"></RadioButton>
					<RadioButton ToolTip.Tip="Sends the position to a third-party Intiface server, which supports numerous strokers on the local network and bluetooth." Command="{Binding SetOutputDeviceCommand}" CommandParameter="3" GroupName="OutputDevice" IsChecked="False" Content="Intiface server"></RadioButton>
					<RadioButton ToolTip.Tip="Records the position to a funscript. Can be used to pre-record videos with a perfectly matching script out of the box." Command="{Binding SetOutputDeviceCommand}" CommandParameter="4" GroupName="OutputDevice" IsChecked="False" Content="Script recorder"></RadioButton>
				</StackPanel>

				<Button Content="Connect" Command="{Binding ConnectOutputDeviceCommand}" IsEnabled="{Binding CanClickConnectOutputDeviceButton}" Margin="0,0,0,20" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Bottom"></Button>

				<Separator Grid.Row="1" VerticalAlignment="Bottom" Margin="0,0,0,5"/>

				<StackPanel Grid.Row="2" Spacing="10" Margin="5,10,5,10">
					
					<DockPanel>
						<TextBlock Text="Status: " ></TextBlock> 
						<TextBlock Text="{Binding OutputDeviceStatusText}"></TextBlock> 
					</DockPanel>
					
					<lvc:CartesianChart x:Name="outputPositionChart" TooltipPosition="Hidden" BorderBrush="{StaticResource PrimaryBackground}" BorderThickness="1" Height="70" Series="{Binding OutputPositionSeries}" XAxes="{Binding PositionChartXAxes}" AnimationsSpeed="0" ZoomMode="None">
					</lvc:CartesianChart>--><!--

					--><!--<ToggleSwitch Margin="0,20,0,0" Content="Motion mode" OffContent="Continuous" OnContent="Peak" IsChecked="{Binding PeakMotionMode}" ToolTip.Tip="In 'Peak' motion mode, the position is written only as the direction of motion changes. This results in more jagged motion, but should work better if the connection to the device has limited bandwidth or high latency, such as connections over the internet. For local connections, 'continuous' mode is preferred as the motion is smoother and more accurate."></ToggleSwitch>--><!--

				--><!--<Button Content="Stop and save recording" Command="{Binding StopAndSaveFunscriptRecordingCommand}" IsVisible="{Binding OutputDeviceIsFunscript}"/>
					
					<DockPanel IsVisible="{Binding OutputDeviceIsFunscript}">
						<Button x:Name="test" Content="Set file:" Click="ChangeFunscriptPathButton_Clicked"/>
						<TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Text="{Binding FunscriptOutputPathAbbreviated}"></TextBlock>
					</DockPanel>

				</StackPanel>-->
				
			</Grid>
		</Border>

		<!-- ADVANCED SETTINGS BOX -->
		<Button Content="â˜°" Command="{Binding ToggleAdvancedSettingsCommand}" Grid.Column="1" FontSize="24" VerticalAlignment="Bottom" Margin="0,0,0,25" HorizontalAlignment="Center"></Button>

		<Border IsVisible="{Binding AdvancedSettingsAreOpen}" Padding="20" BorderBrush="Black" BorderThickness="2" Background="{StaticResource PrimaryBackground}" CornerRadius="15" Grid.ColumnSpan="3" HorizontalAlignment="Center" VerticalAlignment="Center">
			<StackPanel MinWidth="400" MinHeight="400" Spacing="10">

				<TextBlock Text="Teledong Commander software v0.1.0 - Teledong.com"></TextBlock>
				
				<TextBlock Text="Advanced Settings" FontWeight="SemiBold" Margin="0,10,0,10"/>
				<StackPanel>
					
					<TextBlock Text="{Binding ReadInterval, StringFormat='Read interval: {0:0} ms'}" />
					<Slider Value="{Binding ReadInterval}" Minimum="5" Maximum="150"/>
					<!--<TextBlock Text="{Binding WriteInterval, StringFormat='Write interval: {0:0} ms'}" />
					<Slider Value="{Binding WriteInterval}" Minimum="10" Maximum="300"/>
					<TextBlock Text="{Binding WriteCommandDuration, StringFormat='Write command duration: {0:0} ms'}"/>
					<Slider Value="{Binding WriteCommandDuration}" Minimum="10" Maximum="500"/>-->
					<TextBlock Text="{Binding FilterEpsilon, StringFormat='Filtering strength: {0:0.00}'}"  ToolTip.Tip="This is strength of the filter that tries to reduce the amount of commands in the output. Smaller values will result in smoother movement in theory, but can cause jitter/stuttering on strokers. Default: 0.05"/>
					<Slider Value="{Binding FilterEpsilon}" Minimum="0" Maximum="1" ToolTip.Tip="This is strength of the filter that tries to reduce the amount of commands in the output. Smaller values will result in smoother movement in theory, but can cause jitter/stuttering on strokers. Default: 0.05"/>
					<TextBlock Text="{Binding FilterTimeMilliseconds, StringFormat='Filter period (latency): {0:0} ms'}" ToolTip.Tip="This is the duration of data that is buffered and filtered before being send to the output device. Smaller values will result in less latency, but can cause jitter/stuttering on strokers. Default: 300ms" />
					<Slider Value="{Binding FilterTimeMilliseconds}" Minimum="0" Maximum="5000"  ToolTip.Tip="This is the duration of data that is buffered and filtered before being send to the output device. Shorter values will result in less latency, but can cause jitter/stuttering on strokers. Default: 300ms"/>
					
					<StackPanel Orientation="Horizontal">
						<Button Margin="5" Content="Enter Teledong Bootloader" Command="{Binding TeledongBootToBootloaderCommand}" IsEnabled="{Binding InputDeviceIsTeledong}"></Button>
						<TextBlock Margin="5" VerticalAlignment="Center" Text="{Binding TeledongFirmwareVersion, StringFormat='Firmware version: {0}'}"></TextBlock>
					</StackPanel>
					
				</StackPanel>
				
				<TextBlock Text="Raw sensor values" FontWeight="SemiBold" Margin="0,0,0,10"/>
				<TextBlock Text="{Binding SensorValuesDebugString}"></TextBlock>
				
			</StackPanel>	
		</Border>
		
	</Grid>
</UserControl>
